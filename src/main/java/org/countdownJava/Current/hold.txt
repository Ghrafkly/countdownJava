public int[][] generatePostfix(int[] permutation, int[][] postfixArray, int[] current, int opsNeeded, int currentIndex, int listIndex, int postfixIndex) {
	try {
		if (opsNeeded == 0 && listIndex == permutation.length) {
			postfixArray[postfixIndex++] = Arrays.copyOf(current, current.length);
		}

		if (opsNeeded > 0) {
			for (int operator : operators) {
				current[currentIndex++] = operator;
				generatePostfix(permutation, postfixArray, current, opsNeeded - 1, currentIndex, listIndex, postfixIndex);
				currentIndex--;
			}
		}

		if (listIndex < permutation.length) {
			current[currentIndex++] = permutation[listIndex++];
			generatePostfix(permutation, postfixArray, current, opsNeeded + 1, currentIndex, listIndex, postfixIndex);
			currentIndex--;
			listIndex--;
		}
	} catch (Exception e) {
		System.out.printf("Exception for %s%n", Arrays.toString(permutation));
	}

	return postfixArray;

}

for (Map.Entry<List<Integer>, List<List<Integer>>> entry : mapCombinationsPermutations.entrySet()) {
	for (List<Integer> permutation : entry.getValue()) {
		int[] permutationArray = permutation.stream().mapToInt(i -> i).toArray();
		futures.put(permutation, executor.submit(() -> generatePostfix(permutationArray, new int[43008][5], new int[5], -1, 0, 0, 0)));
	}
}